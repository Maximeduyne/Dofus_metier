// This is your Prisma schema file
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id         Int         @id @default(autoincrement())
  name       String
  email      String?
  password   String?
  isGoogle   Boolean     @default(false)
  characters Character[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Character {
  id        Int      @id @default(autoincrement())
  name      String
  class     String
  level     Int
  server    String
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  jobs      Job[]
  packs     Pack[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          Int           @id @default(autoincrement())
  name        String
  level       Int           @default(1)
  currentXP   Int           @default(0)
  icon        String
  characterId Int
  character   Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  activities  JobActivity[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model JobActivity {
  id        Int      @id @default(autoincrement())
  jobId     Int
  type      String // 'HARVEST' ou 'CRAFT'
  itemId    Int // ID de la ressource ou de la recette
  quantity  Int
  xpGained  Int
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Resource {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  type        String // 'HARVEST' ou 'MATERIAL'
  jobType     String // Type de métier (ex: 'Bucheron', 'Mineur', etc.)
  level       Int
  baseXP      Int
  icon        String
  description String?      @db.Text
  asInput     CraftInput[] // Utilisé comme ingrédient dans les crafts
  asOutput    Recipe[] // Résultat d'un craft
  packItems   PackItem[] // Utilisé dans les packs
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Recipe {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  jobType   String
  level     Int
  baseXP    Int
  outputId  Int
  outputQty Int
  output    Resource     @relation(fields: [outputId], references: [id])
  inputs    CraftInput[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model CraftInput {
  id         Int      @id @default(autoincrement())
  recipeId   Int
  resourceId Int
  quantity   Int
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id])
}

model Pack {
  id          Int        @id @default(autoincrement())
  name        String
  description String?    @db.Text
  jobType     String
  startLevel  Int
  targetLevel Int
  isTemplate  Boolean    @default(false)
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  items       PackItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PackItem {
  id         Int      @id @default(autoincrement())
  packId     Int
  resourceId Int
  quantity   Int
  obtained   Int      @default(0)
  pack       Pack     @relation(fields: [packId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id])
}
